{
  
    
        "post0": {
            "title": "Op Amps",
            "content": "Enter the Op-Amp . Dev Patel . January 5, 2021 . In this short paper I’ll dive into Op-Amp Basics. This paper is intended as a supplement to the TJHSST Electronics club presentation on Op-Amps. Please reach out to tjhsstmicroelect@gmail.com for any questions about the Club, TJHSST Electronics course offerings, or Electronics Senior Research. . 1 What is an Op-Amp? . An Op-Amp is short term for Operational Amplifier. An Operational Amplifier can serve many purposes, and is most commonly used to amplify a signal. In our audio chain project, we will use the Op-Amp to amplify the signal coming from a microphone. . Op-Amps are most commonly used for the following: . Signal Conditioning . | Adding, Subtracting, Multiplying, or Dividing a Signal . | . At the most fundamental level, an Op-Amp has 3 ports. One non-inverting input, One inverting input, and one output port. The inverting input and the non-inverting input of the Op-Amp respectively invert and don’t invert the signal. For example, if we were to feed a sine wave (sintheta into our non-inverting input, and had a voltage gain of 1, the output function would be (−sintheta. Don’t worry if you don’t know what all of those terms mean, we are going to dive into them in the next subsection. . 1.1 Differential Amplifier . The Op-Amps we will be using for our project are called Differential Amplifiers. These Differential Amps use a dual supply (+V, and -V). The dual supply ensures a constant supply of voltage. While we won’t dive deep into the inner circuitry of a Differential Amp, they generally use forward biased transistors to balance the output current. Ideally, when no signal is input into the amp, these transistors would ensure that no signal comes out of the amp. However, in the real world, small amounts of signal noise may pass through. The Op-Amp has two input terminals - the inverting and non-inverting terminal. The Op-Amp will only respond to the difference between the two terminals. That’s why if you are only using 1 terminal, it is important to ground the other terminal, otherwise the Op-Amp will . . Figure 1: An example Open-Loop Frequency response curve of an Op-Amp. Taken from . electronics-tutorials.ws . not read the difference between the Voltages, and it won’t respond with the correct output voltage. . An important concept in Op-Amps is impedance. Input impedance is the ratio of input voltage to input current. Op-Amps do not like any current that enter the circuit, and try to close it out completely. In an ideal circuit, we assume input impedance to be infinity. Input impedance exists in the real world however, it’s negligible. Output impedance is the amount of resistance inside the Op-Amp. The Op-Amp is assumed to be a perfect voltage source, so the ideal value is 0. However, in the real world, small amounts of resistance are present in the Amp. . An Ideal Op-Amp has an open loop gain of infinity. However, in the real world, these gains usually start a certain value (like 40dB), and they follow a frequency response curve. . An example of this frequency response curve is shown in Figure 1. At the -3db point, this Op-Amp begins to follow a linear path. We can represent the slope of this curve as the Voltage Gain times the Frequency Bandwidth. . We can calculate the voltage gain of any op-amp with the Voltage Gain Formula . (1) . Op-Amps In Action . In this section we will explore Inverting and Non-Inverting Amplifier configurations with a trusty LM741. The LM741, a Texas Instruments device, is the holy grail of Op-Amps for beginners. It’s robust, relatively quick, and can handle almost whatever you throw at it. Let’s take a look at some of the LM741’s characteristics. All of the following images have been taken from the LM741 Datasheet. Looking closely at Figure 2, we can see that our LM741 has 8 pins. We aren’t going to focus on the offset null pins, or pin 8, so we only really . . Figure 2: Taken from LM741 Datasheet . . Figure 3: LTSpice example Op-Amp Config . have 5 pins to worry about. Pin 2 and 3 are our input pins, 4 and 7 handle our constant power, and pin 6 is our output. Now that we know this, we can start drawing up some circuitry. It’s important to remember while in theory an Op-Amp has infinite gain, in the real world signal noise and current limitations make massive gains off a single amp unlikely. For the LM741, our recommended maximum gain is around 10. . Inverting Op-Amp Configuration . The Inverting Op-Amp (as the name implies) inverts and amplifies the signal in. In Figure 3, we can see what a sample inverting Op-Amp configuration looks like. In Figure 3, we use an LT633 Op-Amp, but the general configuration for all Inverting Op-Amps is the same. Signal in enters through the negative port (the path with R1 in the figure). In an inverting Op-Amp, the voltage gain can be calculated by using the following expression: . (2) . . Figure 4: LTSpice example Op-Amp Config . This expression multiplied by Vin will give you the voltage coming out of the Op-Amp. One important thing to note about Op-Amps is often there is a current drop after you amplify. This current drop will become an issue later in our audio chain project as we reach the Speaker Stage. . Non-Inverting Op-Amp Configuration . The Non-Inverting Op-Amp (as the name implies) only amplifies the signal in. In Figure 4, we can see what a sample non-inverting Op-Amp configuration looks like. In Figure 4, we use an LT633 Op-Amp, but the general configuration for all Non-Inverting Op-Amps is the same. Signal in enters through the positive port (left empty in the figure). In a non-inverting Op-Amp, the voltage gain can be calculated by using the following expression: . (3) . This expression multiplied by Vin will give you the voltage coming out of the Op-Amp. . Conclusions . This has been a brief overview of Op-Amps. Now go and create your own Op-Amp Circuits! .",
            "url": "https://moonbeam87.github.io/fastpages/2021/01/05/Op-Amps.html",
            "relUrl": "/2021/01/05/Op-Amps.html",
            "date": " • Jan 5, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "6502 Assembly Optimization",
            "content": "6502 Assembly Optimization . Recently, I finished part 4 of the 6502 computer vlog by Ben Eater. In part 5, Ben wants to optimize the assembly code to write Hello World by adding an SKRAM because it takes up too much space. Although I have no doubts that the SKRAM is the most efficient way to optimize the a.out file, I wanted to try to make changes directly to the assembly file. . Lets look at the original code for the “hello_world.s” assembly file: . PORTB = $6000 PORTA = $6001 DDRB = $6002 DDRA = $6003 E = %10000000 RW = %01000000 RS = %00100000 .org $8000 reset: lda #%11111111 ; Set all pins on port B to output sta DDRB lda #%11100000 ; Set top 3 pins on port A to output sta DDRA lda #%00111000 ; Set 8-bit mode; 2-line display; 5x8 font sta PORTB lda #0 ; Clear RS/RW/E bits sta PORTA lda #E ; Set E bit to send instruction sta PORTA lda #0 ; Clear RS/RW/E bits sta PORTA lda #%00001110 ; Display on; cursor on; blink off sta PORTB lda #0 ; Clear RS/RW/E bits sta PORTA lda #E ; Set E bit to send instruction sta PORTA lda #0 ; Clear RS/RW/E bits sta PORTA lda #%00000110 ; Increment and shift cursor; don&#39;t shift display sta PORTB lda #0 ; Clear RS/RW/E bits sta PORTA lda #E ; Set E bit to send instruction sta PORTA lda #0 ; Clear RS/RW/E bits sta PORTA lda #&quot;H&quot; sta PORTB lda #RS ; Set RS; Clear RW/E bits sta PORTA lda #(RS | E) ; Set E bit to send instruction sta PORTA lda #RS ; Clear E bits sta PORTA lda #&quot;e&quot; sta PORTB lda #RS ; Set RS; Clear RW/E bits sta PORTA lda #(RS | E) ; Set E bit to send instruction sta PORTA lda #RS ; Clear E bits sta PORTA lda #&quot;l&quot; sta PORTB lda #RS ; Set RS; Clear RW/E bits sta PORTA lda #(RS | E) ; Set E bit to send instruction sta PORTA lda #RS ; Clear E bits sta PORTA lda #&quot;l&quot; sta PORTB lda #RS ; Set RS; Clear RW/E bits sta PORTA lda #(RS | E) ; Set E bit to send instruction sta PORTA lda #RS ; Clear E bits sta PORTA lda #&quot;o&quot; sta PORTB lda #RS ; Set RS; Clear RW/E bits sta PORTA lda #(RS | E) ; Set E bit to send instruction sta PORTA lda #RS ; Clear E bits sta PORTA lda #&quot;,&quot; sta PORTB lda #RS ; Set RS; Clear RW/E bits sta PORTA lda #(RS | E) ; Set E bit to send instruction sta PORTA lda #RS ; Clear E bits sta PORTA lda #&quot; &quot; sta PORTB lda #RS ; Set RS; Clear RW/E bits sta PORTA lda #(RS | E) ; Set E bit to send instruction sta PORTA lda #RS ; Clear E bits sta PORTA lda #&quot;w&quot; sta PORTB lda #RS ; Set RS; Clear RW/E bits sta PORTA lda #(RS | E) ; Set E bit to send instruction sta PORTA lda #RS ; Clear E bits sta PORTA lda #&quot;o&quot; sta PORTB lda #RS ; Set RS; Clear RW/E bits sta PORTA lda #(RS | E) ; Set E bit to send instruction sta PORTA lda #RS ; Clear E bits sta PORTA lda #&quot;r&quot; sta PORTB lda #RS ; Set RS; Clear RW/E bits sta PORTA lda #(RS | E) ; Set E bit to send instruction sta PORTA lda #RS ; Clear E bits sta PORTA lda #&quot;l&quot; sta PORTB lda #RS ; Set RS; Clear RW/E bits sta PORTA lda #(RS | E) ; Set E bit to send instruction sta PORTA lda #RS ; Clear E bits sta PORTA lda #&quot;d&quot; sta PORTB lda #RS ; Set RS; Clear RW/E bits sta PORTA lda #(RS | E) ; Set E bit to send instruction sta PORTA lda #RS ; Clear E bits sta PORTA lda #&quot;!&quot; sta PORTB lda #RS ; Set RS; Clear RW/E bits sta PORTA lda #(RS | E) ; Set E bit to send instruction sta PORTA lda #RS ; Clear E bits sta PORTA loop: jmp loop .org $fffc .word reset .word $0000 . Looking closely at the code we can see a pattern. After every function set call to the display, we have to reenable the RS, RW, and E pins. This is in accordance to the LCD controller datasheet. We load the RS Bit, and store it to the Port A output which the display can read. . We have about two different patterns that repeat. One for the initial display parameters, and the other for the display writing. I’ll call the parameter repetition “enable”, and the display write repetition “displaywrite”. We can rewrite the code above to leverage methods with the .word function enabled on the compiler. Let’s look at the new code: . PORTB = $6000 PORTA = $6001 DDRB = $6002 DDRA = $6003 E = %10000000 RW = %01000000 RS = %00100000 .org $8000 enable: lda #0 ; Clear RS/RW/E bits sta PORTA lda #E ; Set E bit to send instruction sta PORTA lda #0 ; Clear RS/RW/E bits sta PORTA datawrite: lda #RS ; Set RS; Clear RW/E bits sta PORTA lda #(RS | E) ; Set E bit to send instruction sta PORTA lda #RS ; Clear E bits sta PORTA reset: lda #%11111111 ; Set all pins on port B to output sta DDRB lda #%11100000 ; Set top 3 pins on port A to output sta DDRA lda #%00111000 ; Set 8-bit mode; 2-line display; 5x8 font sta PORTB .word enable lda #%00001110 ; Display on; cursor on; blink off sta PORTB .word enable lda #%00000110 ; Increment and shift cursor; don&#39;t shift display sta PORTB .word enable lda #&quot;H&quot; sta PORTB .word datawrite lda #&quot;e&quot; sta PORTB .word datawrite lda #&quot;l&quot; sta PORTB .word datawrite lda #&quot;l&quot; sta PORTB .word datawrite lda #&quot;o&quot; sta PORTB .word datawrite lda #&quot;,&quot; sta PORTB .word datawrite lda #&quot; &quot; sta PORTB .word datawrite lda #&quot;w&quot; sta PORTB .word datawrite lda #&quot;o&quot; sta PORTB .word datawrite lda #&quot;r&quot; sta PORTB .word datawrite lda #&quot;l&quot; sta PORTB .word datawrite lda #&quot;d&quot; sta PORTB .word datawrite lda #&quot;!&quot; sta PORTB .word datawrite loop: jmp loop .org $fffc .word reset .word $0000 . As you can see, the overall function of the code did not change at all. All we did was reference a method. Referencing a method saves more space then rewriting the code. This is evident in the EEPROM. The original code size was almost 355 Bytes. Our new code size is around 155 bytes, giving us almsot 200 bytes more of EEPROM space. . We can visualize our space savings by calling: . hexdump -C a.out . This will let us visualize the storage in the EEPROM. The original file looks like this: . 00000000 a9 00 8d 01 60 a9 80 8d 01 60 a9 00 8d 01 60 a9 |....`....`....`.| 00000010 ff 8d 02 60 a9 e0 8d 03 60 a9 38 8d 00 60 00 80 |...`....`.8..`..| 00000020 a9 0e 8d 00 60 a9 00 8d 01 60 a9 80 8d 01 60 a9 |....`....`....`.| 00000030 00 8d 01 60 a9 06 8d 00 60 a9 00 8d 01 60 a9 80 |...`....`....`..| 00000040 8d 01 60 a9 00 8d 01 60 a9 48 8d 00 60 a9 20 8d |..`....`.H..`. .| 00000050 01 60 a9 a0 8d 01 60 a9 20 8d 01 60 a9 65 8d 00 |.`....`. ..`.e..| 00000060 60 a9 20 8d 01 60 a9 a0 8d 01 60 a9 20 8d 01 60 |`. ..`....`. ..`| 00000070 a9 6c 8d 00 60 a9 20 8d 01 60 a9 a0 8d 01 60 a9 |.l..`. ..`....`.| 00000080 20 8d 01 60 a9 6c 8d 00 60 a9 20 8d 01 60 a9 a0 | ..`.l..`. ..`..| 00000090 8d 01 60 a9 20 8d 01 60 a9 6f 8d 00 60 a9 20 8d |..`. ..`.o..`. .| 000000a0 01 60 a9 a0 8d 01 60 a9 20 8d 01 60 a9 2c 8d 00 |.`....`. ..`.,..| 000000b0 60 a9 20 8d 01 60 a9 a0 8d 01 60 a9 20 8d 01 60 |`. ..`....`. ..`| 000000c0 a9 20 8d 00 60 a9 20 8d 01 60 a9 a0 8d 01 60 a9 |. ..`. ..`....`.| 000000d0 20 8d 01 60 a9 77 8d 00 60 a9 20 8d 01 60 a9 a0 | ..`.w..`. ..`..| 000000e0 8d 01 60 a9 20 8d 01 60 a9 6f 8d 00 60 a9 20 8d |..`. ..`.o..`. .| 000000f0 01 60 a9 a0 8d 01 60 a9 20 8d 01 60 a9 72 8d 00 |.`....`. ..`.r..| 00000100 60 a9 20 8d 01 60 a9 a0 8d 01 60 a9 20 8d 01 60 |`. ..`....`. ..`| 00000110 a9 6c 8d 00 60 a9 20 8d 01 60 a9 a0 8d 01 60 a9 |.l..`. ..`....`.| 00000120 20 8d 01 60 a9 64 8d 00 60 a9 20 8d 01 60 a9 a0 | ..`.d..`. ..`..| 00000130 8d 01 60 a9 20 8d 01 60 a9 21 8d 00 60 a9 20 8d |..`. ..`.!..`. .| 00000140 01 60 a9 a0 8d 01 60 a9 20 8d 01 60 4c 4c 81 00 |.`....`. ..`LL..| 00000150 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| * 00007ff0 00 00 00 00 00 00 00 00 00 00 00 00 0f 80 00 00 |................| 00008000 . Our optimized file looks like this: . 00000000 a9 00 8d 01 60 a9 80 8d 01 60 a9 00 8d 01 60 a9 |....`....`....`.| 00000010 20 8d 01 60 a9 a0 8d 01 60 a9 20 8d 01 60 a9 ff | ..`....`. ..`..| 00000020 8d 02 60 a9 e0 8d 03 60 a9 38 8d 00 60 00 80 a9 |..`....`.8..`...| 00000030 0e 8d 00 60 00 80 a9 06 8d 00 60 00 80 a9 48 8d |...`......`...H.| 00000040 00 60 0f 80 a9 65 8d 00 60 0f 80 a9 6c 8d 00 60 |.`...e..`...l..`| 00000050 0f 80 a9 6c 8d 00 60 0f 80 a9 6f 8d 00 60 0f 80 |...l..`...o..`..| 00000060 a9 2c 8d 00 60 0f 80 a9 20 8d 00 60 0f 80 a9 77 |.,..`... ..`...w| 00000070 8d 00 60 0f 80 a9 6f 8d 00 60 0f 80 a9 72 8d 00 |..`...o..`...r..| 00000080 60 0f 80 a9 6c 8d 00 60 0f 80 a9 64 8d 00 60 0f |`...l..`...d..`.| 00000090 80 a9 21 8d 00 60 0f 80 4c 98 80 00 00 00 00 00 |..!..`..L.......| 000000a0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| * 00007ff0 00 00 00 00 00 00 00 00 00 00 00 00 1e 80 00 00 |................| 00008000 . The SKRAM method is faster and more efficient, but this method saves space and requires no extra hardware. However, it would require some port address changing on the EEPROM, and a lot of troubleshooting, so I’ll save the implementation for later. . Thanks for reading! .",
            "url": "https://moonbeam87.github.io/fastpages/markdown/2021/01/05/6502-Optimization.html",
            "relUrl": "/markdown/2021/01/05/6502-Optimization.html",
            "date": " • Jan 5, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Vector Fields",
            "content": "Example Problem 1: . $ vec{F}(x,y) = -y* vec{i}+x* vec{j} $ . Graph the Vector Field . import numpy as np import matplotlib.pyplot as plt %matplotlib inline x,y = np.meshgrid(np.linspace(-5,5,10),np.linspace(-5,5,10)) u = -y v = x plt.quiver(x,y,u,v) plt.show() . As you can see, the function follows a circular path centered at the origin. The length of each arrow is dependent on the x and y value chosen. The further away the end of the arrow is from the origin, the larger the arrow will be. Each arrow is tangent to a circle centered at the origin. . To calculate the radius of the circle, we take the following steps: . $ r = sqrt{x^2+y^2} $ . Example Problem 2: . $ vec{f}(x,y) = x^2y vec{i}-y^3 vec{j} $ . Plot the gradient vector field and the contour map of the original function . Our first step is to calculate the gradient of $ vec{f} $. We do this by taking the derivative of the P and Q function in f: . $ P = df/dx $ . $ df/dx = 2xy $ . $ Q = df/dy $ . $ df/dy = x^2-3y^2 $ . So our final gradient of f is as follows: . $ nabla{ vec{f}} = 2xy vec{i}+(x^2-3y^2) vec{j} $ . Now we can graph the gradient and our contour map . x,y = np.meshgrid(np.linspace(-5,5,10),np.linspace(-5,5,10)) u = 2*x*y v = x**2-3*y**2 plt.quiver(x,y,u,v) xlist = np.linspace(-5.0, 5.0, 100) ylist = np.linspace(-5.0, 5.0, 100) X, Y = np.meshgrid(xlist, ylist) Z = Y*X**2 - Y**3 plt.contour(X,Y,Z) plt.show() . The Vector Field shown here are perpendicular to the contour map, which would make sense considering the vector field is of the gradient vector of f. . If $ vec{F} $ is conservative, then $ f $ exists such that $ vec{F} = nabla{f} $ .",
            "url": "https://moonbeam87.github.io/fastpages/2021/01/01/Vector-Fields.html",
            "relUrl": "/2021/01/01/Vector-Fields.html",
            "date": " • Jan 1, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Single Ring Cfd Formatted Report",
            "content": "A CFD Write Up by Dev Patel . Robot Uprising FTC 14607 | Alexandria, VA | robotuprising.org . | Fluid Flow Simulation Project Report | . Dev Patel ∙ | 2021dpatel@gmail.com | | . | | | | . SOLIDWORKS Flow Simulation . Project Report . January 1, 2021 . . | | | | . Learn more about SOLIDWORKS Flow Simulation | | | | . # Table of Contents . 1 General Information 1 . 1.1 Analysis Environment 1 . 1.2 Model Information 1 . 1.3 Project Comments: 1 . 1.4 Size of Computational Domain 1 . 1.5 Simulation Parameters 1 . 1.5.1 Mesh Settings 1 . 1.5.2 Material Settings 2 . 1.5.3 Initial Conditions 2 . 1.5.4 Boundary Conditions 2 . 1.5.5 Volumetric Heat Sources 2 . 1.5.6 Engineering Goals 2 . 1.6 Analysis Time 2 . 2 Results 2 . 2.1 Analysis Goals 2 . 2.2 Global Min-Max-Table 2 . 2.3 Results 2 . 3 Appendix 2 . 3.1 Material Data 2 . General Information . Objective of the simulation: The objective of this simulation was to determine the drag coefficient of the Ultimate Goal FTC Ring, and to visualize airflow of the ring at launch speed. . Analysis Environment . Software Product: Flow Simulation 2020 3.0. Build: 4921 . CPU Type: Intel(R) Xeon(R) CPU E5-1620 v3 @ 3.50GHz . CPU Speed: 3501 MHz . RAM: 32690 MB / 18463 MB . Operating System: Windows 10 (or higher) (Version 10.0.18362) . Model Information . Model Name: Drag-Ring.SLDPRT . Project Name: Project(1) . Project Comments: . Unit System: SI (m-kg-s) . Analysis Type: External (not exclude internal spaces) . Size of Computational Domain . Size . X min -0.121 m . X max | 0.159 m | . Y min | -0.067 m | . Y max | 0.067 m | . Z min | -0.121 m | . Z max | 0.121 m | . X size | 0.279 m | . Y size | 0.133 m | . Z size | 0.241 m | . Simulation Parameters . Mesh Settings . Basic Mesh . Basic Mesh Dimensions . Number of cells in X 68 . Number of cells in Y | 32 | . Number of cells in Z | 58 | . Analysis Mesh . Total Cell count: 124136 . Fluid Cells: 124136 . Solid Cells: 4836 . Partial Cells: 2764 . Trimmed Cells: 0 . Additional Physical Calculation Options . Heat Transfer Analysis: Heat conduction in solids: Off . Flow Type: Laminar and turbulent . Time-Dependent Analysis: Off . Gravity: Off . Radiation: . Humidity: Off . Default Wall Roughness: 0 micrometer . Material Settings . Material Settings . Fluids . Air . Initial Conditions . Ambient Conditions . Thermodynamic parameters Static Pressure: 101325.00 Pa . Temperature: 293.20 K . . Velocity parameters | Velocity vector . Velocity in X direction: 5.500 m/s . Velocity in Y direction: 0 m/s . Velocity in Z direction: 0 m/s . | . Turbulence parameters | Turbulence intensity and length . Intensity: 0.10 % . Length: 1.905e-04 m . | . Engineering Goals . Goals . Global Goals . GG Force (X) 1 . Type Global Goal . Goal type | Force (X) | . Coordinate system | Global coordinate system | . Use in convergence | On | . Equation Goals . Equation Goal 1 . Type Equation Goal . Formula | GG Force (X) 1*2/(0.0249*1.204*(5.5)^2) | . Dimensionality | Force | . Use in convergence | On | . Analysis Time . Calculation Time: 0 s . Number of Iterations: 182 . Warnings: . # . Results . Analysis Goals . Goals . Name Unit Value Progress Criteria Delta Use in convergence . GG Force (X) 1 | N | 0.025 | 100 | 0.000698638676 | 0.000630624299 | On | . Equation Goal 1 | N | 0.055 | 100 | 0.00154074727 | 0.00139075133 | On | . Global Min-Max-Table . Min/Max Table . Name Minimum Maximum . Density (Fluid) [kg/m^3] | 1.20 | 1.20 | . Pressure [Pa] | 101290.97 | 101345.85 | . Temperature [K] | 293.19 | 293.21 | . Temperature (Fluid) [K] | 293.19 | 293.21 | . Velocity [m/s] | 0 | 7.204 | . Velocity (X) [m/s] | -0.919 | 6.876 | . Velocity (Y) [m/s] | -4.386 | 4.578 | . Velocity (Z) [m/s] | -3.491 | 3.434 | . Mach Number [ ] | 0 | 0.02 | . Velocity RRF [m/s] | 0 | 7.204 | . Velocity RRF (X) [m/s] | -0.919 | 6.876 | . Velocity RRF (Y) [m/s] | -4.386 | 4.578 | . Velocity RRF (Z) [m/s] | -3.491 | 3.434 | . Vorticity [1/s] | 0.20 | 1843.14 | . Relative Pressure [Pa] | -34.03 | 20.85 | . Shear Stress [Pa] | 0 | 0.85 | . Bottleneck Number [ ] | 4.1642142e-13 | 1.0000000 | . Heat Transfer Coefficient [W/m^2/K] | 0 | 0 | . ShortCut Number [ ] | 9.7415646e-13 | 1.0000000 | . Surface Heat Flux [W/m^2] | 0 | 0 | . Surface Heat Flux (Convective) [W/m^2] | 0 | 0 | . Acoustic Power [W/m^3] | 0 | 3.066e-10 | . Acoustic Power Level [dB] | 0 | 24.87 | . Results . As shown in our analysis goals, we found that the overall Drag Coefficient at 5.5 m/s of the ring was about 0.055. We also found interesting results with the flow trajectory visualization. The air is at its fastest (6.2 m/s) as it scales the furthest edge of the cylinder. That high speed movement creates a wind vortex behind the cylinder. The spiraling of the airflow (dirty air) can create turbulence for an object behind it, especially if the object is travelling very close to it. In addition to the dirty air vortex, we also see a pool of slower air inside the cylinder cavity. This pool of air eventually leaks out from the top and bottom of the cylinder, speeding up and entering the vortex. This air pool may affect another cylinder or object travelling just above the cylinder. The air pool has a speed of almost .17 m/s, so it is much slower than the cylinder edge. . . # . Appendix . Material Data . Engineering Database . Gases . Air . Path: Gases Pre-Defined . Specific heat ratio (Cp/Cv): 1.399 . Molecular mass: 0.0290 kg/mol . Dynamic viscosity . . Specific heat (Cp) . . Thermal conductivity . .",
            "url": "https://moonbeam87.github.io/fastpages/2020/11/20/Single-Ring-CFD-Formatted-Report.html",
            "relUrl": "/2020/11/20/Single-Ring-CFD-Formatted-Report.html",
            "date": " • Nov 20, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "High Pass Filters",
            "content": "A look into a First Order Passive High Pass RC Filter . Dev Patel . September 14, 2020 . In this short paper I’ll dive into the passive, high pass RC Filters. . 1 What is a RC Filter? . What is a RC Filter. A RC Filter is a filter circuit that uses only Resistors and Capacitors. RC Filters are used to adjust frequencies on circuits and have several applications in Signal Processing. An RC Filter is a type of Analog Filter. We will not explore Digital Filters in this paper. . RC Filters have something called a ”cutoff frequency”. This cutoff frequency determines the type of signal that can pass through the circuit. There are two types of RC Filters High Pass, and Low Pass. . In a High Pass Filter, only Frequencies above the cutoff frequency are allowed. In a Low Pass Filter, only the Frequencies below the cutoff are allowed. . Passive High Pass Filter . Before we get started exploring the High Pass Filter Theory, we need an example of what the Circuit would look like. In Figure 1, we have the basic circuitry for a 1st order High Pass Filter. Orders can Increase by adding more capacitors and resistors, similar to Figure . 2. . The equation to solve for the cutoff frequency in a passive high pass filter is: . (1) . . Figure 1: A basic example of a 1st order High Pass Filter . . Figure 2: A basic example of a 2nd order High Pass Filter . . Figure 3: Frequency Response curve for a High Pass Filter . In the equation, Fc represents the cutoff frequency. C represents the capacitance, and R represents the resistance. Some values of Fc that are used commonly are 40Hz for Music System Filters, and 150Hz for Voice System Filters. Let’s look at a Frequency Response Curve for a Passive High Pass Filter. The Magenta line represents the frequency response curve. Point B on the curve is our frequency break point. The frequency break point always is about 3dB below the original signal, has a phase shift of about 45 degrees, and is where about 70.7% of the signal goes through. The area on the graph from point A to B is called the stopband. The stopband is the area where the frequencies do not get past the filter. The area from B onwards to the right is the passband . . Let’s take a deep dive into an example, 1st order passive high pass filter. The circuit schematics are the same as Figure 1. Our Sin signal has an amplitude of 1 volt, and has a frequency of about 150 Hz. We are going to select a resistance value of about 10k Ohms, which is recommended to use with 150Hz Signal. Now we can calculate our optimal capacitance value. . . . Now that we have our capacitance value, we can now start to calculate Xc. Xc is our capacitance reactance charge. Xc will equal R at our breakpoint. We can mathematically verify this. . . Now that we have our Xc, R, C, and Fc, we can now mathematically justify why 70.7% is retained at the breakpoint. To do that, we need to look into the phase shift. The phase shift of our curve at the breakpoint is 45 degrees. This would imply that both the X component (R) and the Y component (Xc) are the same (which is true at the breakpoint). So, lets use our 10K Ohms for R and Xc as an example. . √ . 102 + 102 . is equal to about 14.1K. 10K/14.1K is about 70.7%, which explains why at any breakpoint value in a passive, high pass filter, about 70.7% of the signal passes through. . Conclusions . This has been a brief overview of the Passive High Pass Filter. Now go and create your own! .",
            "url": "https://moonbeam87.github.io/fastpages/2020/09/14/High-Pass-Filters.html",
            "relUrl": "/2020/09/14/High-Pass-Filters.html",
            "date": " • Sep 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . Hi there 👋 :shipit: . I’m a senior at TJHSST! I love robotics, python, linux, and aws! . https://sourcerer.io/moonbeam87 . . 📜 My Credentials Include … SAP-C01 | SAA-C02 | . | 📫 How to reach me: Email! | ⚡ Fun fact: … McLaren F1 is my favorite racing team, and Fernando Alonso is my favorite driver! | . | . . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://moonbeam87.github.io/fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://moonbeam87.github.io/fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}